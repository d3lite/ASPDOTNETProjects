//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Project4.CreditCardSvc {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CreditCardSoap", Namespace="http://tempuri.org/")]
    public partial class CreditCard : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCreditInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionByUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakePaymentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CreditCard() {
            this.Url = global::Project4.Properties.Settings.Default.Project4_CreditCardSvc_CreditCard;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddCreditCardCompletedEventHandler AddCreditCardCompleted;
        
        /// <remarks/>
        public event GetCreditInformationCompletedEventHandler GetCreditInformationCompleted;
        
        /// <remarks/>
        public event UpdateCreditInformationCompletedEventHandler UpdateCreditInformationCompleted;
        
        /// <remarks/>
        public event VerifyInformationCompletedEventHandler VerifyInformationCompleted;
        
        /// <remarks/>
        public event AddToBalanceCompletedEventHandler AddToBalanceCompleted;
        
        /// <remarks/>
        public event AddTransactionCompletedEventHandler AddTransactionCompleted;
        
        /// <remarks/>
        public event GetTransactionByUserNameCompletedEventHandler GetTransactionByUserNameCompleted;
        
        /// <remarks/>
        public event GetPaymentDetailsCompletedEventHandler GetPaymentDetailsCompleted;
        
        /// <remarks/>
        public event MakePaymentCompletedEventHandler MakePaymentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCreditCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCreditCard(string[] array, int APIKey) {
            this.Invoke("AddCreditCard", new object[] {
                        array,
                        APIKey});
        }
        
        /// <remarks/>
        public void AddCreditCardAsync(string[] array, int APIKey) {
            this.AddCreditCardAsync(array, APIKey, null);
        }
        
        /// <remarks/>
        public void AddCreditCardAsync(string[] array, int APIKey, object userState) {
            if ((this.AddCreditCardOperationCompleted == null)) {
                this.AddCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCreditCardOperationCompleted);
            }
            this.InvokeAsync("AddCreditCard", new object[] {
                        array,
                        APIKey}, this.AddCreditCardOperationCompleted, userState);
        }
        
        private void OnAddCreditCardOperationCompleted(object arg) {
            if ((this.AddCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCreditCardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCreditInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCreditInformation(string ssn, string username, int APIKey) {
            object[] results = this.Invoke("GetCreditInformation", new object[] {
                        ssn,
                        username,
                        APIKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditInformationAsync(string ssn, string username, int APIKey) {
            this.GetCreditInformationAsync(ssn, username, APIKey, null);
        }
        
        /// <remarks/>
        public void GetCreditInformationAsync(string ssn, string username, int APIKey, object userState) {
            if ((this.GetCreditInformationOperationCompleted == null)) {
                this.GetCreditInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditInformationOperationCompleted);
            }
            this.InvokeAsync("GetCreditInformation", new object[] {
                        ssn,
                        username,
                        APIKey}, this.GetCreditInformationOperationCompleted, userState);
        }
        
        private void OnGetCreditInformationOperationCompleted(object arg) {
            if ((this.GetCreditInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditInformationCompleted(this, new GetCreditInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCreditInformation(string[] array, int APIKey) {
            this.Invoke("UpdateCreditInformation", new object[] {
                        array,
                        APIKey});
        }
        
        /// <remarks/>
        public void UpdateCreditInformationAsync(string[] array, int APIKey) {
            this.UpdateCreditInformationAsync(array, APIKey, null);
        }
        
        /// <remarks/>
        public void UpdateCreditInformationAsync(string[] array, int APIKey, object userState) {
            if ((this.UpdateCreditInformationOperationCompleted == null)) {
                this.UpdateCreditInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCreditInformationOperationCompleted);
            }
            this.InvokeAsync("UpdateCreditInformation", new object[] {
                        array,
                        APIKey}, this.UpdateCreditInformationOperationCompleted, userState);
        }
        
        private void OnUpdateCreditInformationOperationCompleted(object arg) {
            if ((this.UpdateCreditInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCreditInformationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] VerifyInformation(string[] myarray, int APIKey) {
            object[] results = this.Invoke("VerifyInformation", new object[] {
                        myarray,
                        APIKey});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void VerifyInformationAsync(string[] myarray, int APIKey) {
            this.VerifyInformationAsync(myarray, APIKey, null);
        }
        
        /// <remarks/>
        public void VerifyInformationAsync(string[] myarray, int APIKey, object userState) {
            if ((this.VerifyInformationOperationCompleted == null)) {
                this.VerifyInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyInformationOperationCompleted);
            }
            this.InvokeAsync("VerifyInformation", new object[] {
                        myarray,
                        APIKey}, this.VerifyInformationOperationCompleted, userState);
        }
        
        private void OnVerifyInformationOperationCompleted(object arg) {
            if ((this.VerifyInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyInformationCompleted(this, new VerifyInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddToBalance(string[] array, int APIKey) {
            this.Invoke("AddToBalance", new object[] {
                        array,
                        APIKey});
        }
        
        /// <remarks/>
        public void AddToBalanceAsync(string[] array, int APIKey) {
            this.AddToBalanceAsync(array, APIKey, null);
        }
        
        /// <remarks/>
        public void AddToBalanceAsync(string[] array, int APIKey, object userState) {
            if ((this.AddToBalanceOperationCompleted == null)) {
                this.AddToBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToBalanceOperationCompleted);
            }
            this.InvokeAsync("AddToBalance", new object[] {
                        array,
                        APIKey}, this.AddToBalanceOperationCompleted, userState);
        }
        
        private void OnAddToBalanceOperationCompleted(object arg) {
            if ((this.AddToBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToBalanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddTransaction(string[] array, int APIKey) {
            this.Invoke("AddTransaction", new object[] {
                        array,
                        APIKey});
        }
        
        /// <remarks/>
        public void AddTransactionAsync(string[] array, int APIKey) {
            this.AddTransactionAsync(array, APIKey, null);
        }
        
        /// <remarks/>
        public void AddTransactionAsync(string[] array, int APIKey, object userState) {
            if ((this.AddTransactionOperationCompleted == null)) {
                this.AddTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTransactionOperationCompleted);
            }
            this.InvokeAsync("AddTransaction", new object[] {
                        array,
                        APIKey}, this.AddTransactionOperationCompleted, userState);
        }
        
        private void OnAddTransactionOperationCompleted(object arg) {
            if ((this.AddTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionByUserName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTransactionByUserName(string username, int APIKey) {
            object[] results = this.Invoke("GetTransactionByUserName", new object[] {
                        username,
                        APIKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionByUserNameAsync(string username, int APIKey) {
            this.GetTransactionByUserNameAsync(username, APIKey, null);
        }
        
        /// <remarks/>
        public void GetTransactionByUserNameAsync(string username, int APIKey, object userState) {
            if ((this.GetTransactionByUserNameOperationCompleted == null)) {
                this.GetTransactionByUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionByUserNameOperationCompleted);
            }
            this.InvokeAsync("GetTransactionByUserName", new object[] {
                        username,
                        APIKey}, this.GetTransactionByUserNameOperationCompleted, userState);
        }
        
        private void OnGetTransactionByUserNameOperationCompleted(object arg) {
            if ((this.GetTransactionByUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionByUserNameCompleted(this, new GetTransactionByUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPaymentDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPaymentDetails(string cardnum, string cvvnum, int APIKey) {
            object[] results = this.Invoke("GetPaymentDetails", new object[] {
                        cardnum,
                        cvvnum,
                        APIKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentDetailsAsync(string cardnum, string cvvnum, int APIKey) {
            this.GetPaymentDetailsAsync(cardnum, cvvnum, APIKey, null);
        }
        
        /// <remarks/>
        public void GetPaymentDetailsAsync(string cardnum, string cvvnum, int APIKey, object userState) {
            if ((this.GetPaymentDetailsOperationCompleted == null)) {
                this.GetPaymentDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPaymentDetails", new object[] {
                        cardnum,
                        cvvnum,
                        APIKey}, this.GetPaymentDetailsOperationCompleted, userState);
        }
        
        private void OnGetPaymentDetailsOperationCompleted(object arg) {
            if ((this.GetPaymentDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentDetailsCompleted(this, new GetPaymentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MakePayment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MakePayment(string payment, string cardnum, int APIKey) {
            this.Invoke("MakePayment", new object[] {
                        payment,
                        cardnum,
                        APIKey});
        }
        
        /// <remarks/>
        public void MakePaymentAsync(string payment, string cardnum, int APIKey) {
            this.MakePaymentAsync(payment, cardnum, APIKey, null);
        }
        
        /// <remarks/>
        public void MakePaymentAsync(string payment, string cardnum, int APIKey, object userState) {
            if ((this.MakePaymentOperationCompleted == null)) {
                this.MakePaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakePaymentOperationCompleted);
            }
            this.InvokeAsync("MakePayment", new object[] {
                        payment,
                        cardnum,
                        APIKey}, this.MakePaymentOperationCompleted, userState);
        }
        
        private void OnMakePaymentOperationCompleted(object arg) {
            if ((this.MakePaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakePaymentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddCreditCardCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetCreditInformationCompletedEventHandler(object sender, GetCreditInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UpdateCreditInformationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void VerifyInformationCompletedEventHandler(object sender, VerifyInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddToBalanceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddTransactionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetTransactionByUserNameCompletedEventHandler(object sender, GetTransactionByUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionByUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionByUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPaymentDetailsCompletedEventHandler(object sender, GetPaymentDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MakePaymentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591